# ===== Aliases ======

# Environment
alias home='tmux new -A -s Home'
# Ide
alias n='nvim'
# Editor
alias v='vim'

# Trash instead Delete/Remove
alias rm='trash -v'

# => ls
alias ls='exa -lgh --group-directories-first'
alias la='exa -algh --group-directories-first'
alias lg='exa --grid --all'

# => cat
alias cat='bat'

# => cd 
cd () { builtin cd "$@" && exa --grid --all }

# => Git
alias g='git status -s'

# => Kitchen
alias kd='kitchen destroy -f ;' 
alias kc='kitchen converge ;'
alias kl='kitchen login ;'

# => Sway
alias wprop='swaymsg -t get_tree'

# => Nixos
alias nix-search='nix-env -qa | fzf'
alias nus='sudo nixos-rebuild switch'

# # ex = EXtractor for all kinds of archives
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   tar xf $1    ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

nixify() {
  if [ ! -e ./.envrc ]; then
    echo "use nix" > .envrc
    direnv allow
  fi
  if [[ ! -e shell.nix ]] && [[ ! -e default.nix ]]; then
    cat > default.nix <<'EOF'
with import <nixpkgs> {};
mkShell {
  nativeBuildInputs = [
    pkgs.onefetch
  ];
}
EOF
    ${EDITOR:-vim} default.nix
  fi
}
